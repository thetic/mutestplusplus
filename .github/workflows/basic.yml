---
name: Basic builds

"on":
  push:
  pull_request:

jobs:
  clang-format:
    name: Clang Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - uses: DoozyX/clang-format-lint-action@v0.14
        with:
          clangFormatVersion: 14
          source: examples

  cmake:
    strategy:
      matrix:
        include:
          - name: MSVC install
            os: windows-latest
            preset: MSVC
            install: true
            ctest_args: -C Debug
          - name: MSVC 20
            os: windows-latest
            cmake_args: -DCMAKE_CXX_STANDARD=20
            preset: MSVC
            ctest_args: -C Debug
          - name: ClangCL
            os: windows-latest
            cmake_args: -DCMAKE_CXX_STANDARD=17
            preset: ClangCL
            ctest_args: -C Debug
          - name: Clang-Tidy
            os: ubuntu-latest
            preset: clang-tidy
          - name: Linux Clang 98
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=98
            preset: Clang
          - name: Linux Clang 11
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=11
            preset: Clang
          - name: Linux Clang 14
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=14
            preset: Clang
          - name: Linux Clang 17
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=17
            preset: Clang
          - name: Linux Clang 20
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=20
            preset: Clang
          - name: Linux GNU 98
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=98
            preset: GNU
          - name: No long long
            os: ubuntu-latest
            preset: no-long-long
          - name: Detailed
            os: ubuntu-latest
            preset: detailed
          - name: Linux GNU Install
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=11
            preset: GNU
            install: true
          - name: Linux GNU 14
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=14
            preset: GNU
          - name: Linux GNU 17
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=17
            preset: GNU
          - name: Linux GNU 20
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=20
            preset: GNU
          - name: GCC-10
            os: ubuntu-20.04
            cmake_args: >
              -DCMAKE_C_COMPILER=gcc-10
              -DCMAKE_CXX_COMPILER=g++-10
              -DCMAKE_CXX_STANDARD=17
            preset: GNU
          - name: Clang-11
            os: ubuntu-20.04
            cmake_args: >
              -DCMAKE_C_COMPILER=clang-11
              -DCMAKE_CXX_COMPILER=clang++-11
              -DCMAKE_CXX_STANDARD=17
            preset: Clang
          - name: MinGW
            os: ubuntu-latest
            preset: MinGW
            apt_packages: mingw-w64 wine64
          - name: No C++ Standard Library
            os: ubuntu-latest
            preset: no-std-cpp
          - name: No RTTI
            os: ubuntu-latest
            preset: no-rtti
          - name: No Exceptions
            os: ubuntu-latest
            preset: no-exceptions
          - name: Coverage
            os: ubuntu-latest
            preset: coverage
            apt_packages: lcov
          - name: Google Test
            os: ubuntu-20.04
            cmake_args: -DCMAKE_CXX_STANDARD=98
            preset: gtest
            ctest_args: -C Debug
            apt_packages: python2 ninja-build
          - name: Address Sanitizer
            os: ubuntu-latest
            preset: asan
          - name: GCC ARM embedded
            os: ubuntu-latest
            preset: arm-embedded
          - name: Mac install
            os: macos-latest
            preset: defaults
            install: true
          - name: Apple Clang 14
            os: macos-latest
            cmake_args: -DCMAKE_CXX_STANDARD=14
            preset: Clang
          - name: Apple Clang 17
            os: macos-latest
            cmake_args: -DCMAKE_CXX_STANDARD=17
            preset: Clang
          - name: Apple Clang 20
            os: macos-latest
            cmake_args: -DCMAKE_CXX_STANDARD=20
            preset: Clang
          - name: Mac GNU 14
            os: macos-latest
            cmake_args: -DCMAKE_CXX_STANDARD=14
            preset: GNU
          - name: OpenWatcom DOS
            os: ubuntu-latest
            preset: DOS
            apt_packages: dosbox
          - name: Cygwin
            os: windows-latest
            preset: GNU
    name: CMake ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      ### SETUP

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_packages }}
        if: ${{ matrix.apt_packages }}

      - uses: carlosperate/arm-none-eabi-gcc-action@v1
        if: ${{ matrix.name == 'GCC ARM embedded' }}

      - name: Install OpenWatcom
        uses: open-watcom/setup-watcom@v0
        with:
          version: "2.0"
        if: ${{ matrix.name == 'OpenWatcom DOS' }}

      - run: git config --global core.autocrlf input
        if: ${{ matrix.name == 'Cygwin' }}
      - name: Checkout
        uses: actions/checkout@main

      - name: Install Cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          platform: x86
          packages: >
            cmake
            gcc-core
            gcc-g++
            make
        if: ${{ matrix.name == 'Cygwin' }}

      ## BUILD AND TEST

      - name: Configure
        run: cmake --preset ${{ matrix.preset }} ${{ matrix.cmake_args }}
      - name: Build
        run: cmake --build build --verbose -j
      - name: Test
        run: >
          ctest
          --test-dir build
          ${{ matrix.ctest_args }}
          --output-on-failure

      # POST PROCESSING

      - name: Install (*nix)
        run: sudo cmake --install build/
        if: ${{ matrix.install && !startswith(matrix.os, 'windows')}}
      - name: Install (Windows)
        run: cmake --install build/ --config=Debug
        if: ${{ matrix.install && startswith(matrix.os, 'windows')}}
      - name: Use install
        run: |
          cmake -B example_build -S examples
          cmake --build example_build -j
          ctest --test-dir example_build
        if: ${{ matrix.install }}

      - name: Coverage
        run: |
          lcov --capture --directory . --no-external --output-file lcov.info
          lcov --remove lcov.info --output-file lcov.info '*/tests/*'
        if: ${{ matrix.name == 'Coverage' }}

  cmake_msys:
    name: CMake MSYS
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    env:
      LDFLAGS: -static
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            git
            mingw-w64-x86_64-cc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-make
      - name: Configure
        run: cmake --preset=GNU
      - name: Build
        run: cmake --build build -j
      - name: Test
        run: ctest --test-dir build --output-on-failure
